<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vim常用配置</title>
    <url>/2021/02/03/Vim%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><br>&quot; 基本配置 &quot;<br>set nocompatible &quot; 不与 Vi 兼容（采用 Vim 自己的操作命令）。<br>syntax on &quot; 打开语法高亮。自动识别代码，使用多种颜色显示。<br>set showmode &quot; 在底部显示，当前处于命令模式还是插入模式。<br>set showcmd &quot; 命令模式下，在底部显示，当前键入的指令。比如，键入的指令是2y3d，那么底部就会显示2y3，当键入d的时候，操作完成，显示消失。<br>set t_Co = 256 &quot; 启动256色<br>&quot; 设置编码<br>set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936<br>set termencoding=utf-8<br>set encoding=utf-8<br>set langmenu=zh_CN.UTF-8<br>if version &gt;= 603<br>    set helplang=cn<br>endif<br>&quot; 启用鼠标<br>set mouse = a<br>set selection = exclusive<br>set selectmode = mouse, key<br>&quot; 打开文件类型检测<br>filetype plugin on<br>filetype indent on &quot; 开启文件类型检查，并且载入与该类型对应的缩进规则。比如，如果编辑的是.py文件，Vim 就是会找 Python 的缩进规则~/.vim/indent/python.vim<br><br><br>&quot; 搜索相关 &quot;<br>set showmatch &quot; 光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号<br>set hlsearch &quot; 高亮搜索匹配结果<br>set ignorecase &quot; 搜索时忽略大小写<br>set incsearch &quot; 搜索模式下，每输入一个字符，就自动跳至第一个匹配结果<br>set smartcase &quot; 同时打开了ignorecase, 仅对只有一个大写字母的单词敏感<br><br><br>&quot; 编辑相关 &quot;<br>set spell spelllang=en_us &quot; 英语单词 拼写检查<br>set nobackup &quot; 不创建备份文件, 默认情况下，文件保存时，会额外创建一个备份文件，它的文件名是在原文件名的末尾，再添加一个波浪号（〜）<br>set noswapfile &quot; 不创建交换文件, 交换文件主要用于系统崩溃时恢复文件，文件名的开头是.、结尾是.swp<br>set undofile &quot; 保留撤销历史, Vim 会在编辑时保存操作历史，用来供用户撤消更改。默认情况下，操作记录只在本次编辑时有效，一旦编辑结束、文件关闭，操作历史就消失了。打开这个设置，可以在文件关闭后，操作记录保留在一个文件里面，继续存在。这意味着，重新打开一个文件，可以撤销上一次编辑时的操作。撤消文件是跟原文件保存在一起的隐藏文件，文件名以.un~开头。<br>set paste &quot; 粘贴模式<br>set autochdir &quot; 自动切换工作目录。这主要用在一个 Vim 会话之中打开多个文件的情况，默认的工作目录是打开的第一个文件的目录。该配置可以将工作目录自动切换到，正在编辑的文件的目录。<br>set visualbell &quot; 出错时，发出视觉提示，通常是屏幕闪烁。<br>set noerrorbells &quot; 出错时，不要发出响声。<br>set history = 1000 &quot; Vim 需要记住多少次历史操作。<br>set listchars=tab:»■,trail:■ &quot; 如果行尾有多余的空格（包括 Tab 键），该配置将让这些空格显示成可见的小方块。<br>set list<br>set wildmenu &quot; 命令模式下，底部操作指令按下 Tab 键自动补全。第一次按下 Tab，会显示所有匹配的操作指令的清单；第二次按下 Tab，会依次选择各个指令。<br>set wildmode=longest:list,full<br><br><br>&quot; 外观相关 &quot;<br>set number &quot; 显示行号<br>set relativenumber &quot; 显示光标所在的当前行的行号，其他行都为相对于该行的相对行号<br>set guifont = Courier_New:h10:cANSI &quot; 字体<br>set cursorline &quot; 光标所在的当前行高亮<br>set cursorcolumn &quot; 突显当前列<br>set textwidth = 80<br>set wrap &quot; 自动折行，即太长的行分成几行显示, nowrap<br>set linebreak &quot; 只有遇到指定的符号（比如空格、连词号和其他标点符号），才发生折行。也就是说，不会在单词内部折行<br>set wrapmargin = 2 &quot; 指定折行处与编辑窗口的右边缘之间空出的字符数<br>set scrolloff = 5 &quot; 垂直滚动时，光标距离顶部/底部的位置（单位：行）<br>&quot; set sidescrolloff = 15 &quot; 水平滚动时，光标距离行首或行尾的位置（单位：字符）。该配置在不折行时比较有用<br>set laststatus = 2 &quot; 是否显示状态栏。0 表示不显示，1 表示只在多窗口时显示，2 表示显示<br>set ruler &quot; 在状态栏显示光标的当前位置（位于哪一行哪一列）<br><br><br>&quot; 缩进相关 &quot;<br>set autoindent &quot; 按下回车键后，下一行的缩进会自动跟上一行的缩进保持一致。<br>set tabstop = 4 &quot; Tab长度<br>set shiftwidth = 4 &quot; 自动缩进长度<br>set expandtab &quot; 由于 Tab 键在不同的编辑器缩进不一致，该设置自动将 Tab 转为空格。<br>set softtabstop = 4 &quot; Tab 转为多少个空格<br><br><br>&quot;让vimrc配置变更立即生效&quot;<br>autocmd BufWritePost $MYVIMRC source $MYVIMRC<br><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Vim</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows卸载自带Flash</title>
    <url>/2021/02/02/Windows%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6Flash/</url>
    <content><![CDATA[<p>参考该链接完成操作<br><a href="https://helpx.adobe.com/flash-player/kb/uninstall-flash-player-windows.html#main_Download_the_Adobe_Flash_Player_uninstaller">https://helpx.adobe.com/flash-player/kb/uninstall-flash-player-windows.html#main_Download_the_Adobe_Flash_Player_uninstaller</a></p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Flash</tag>
      </tags>
  </entry>
  <entry>
    <title>配置免密登录linux</title>
    <url>/2021/02/01/%E9%85%8D%E7%BD%AE%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95linux/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>切换到git环境下</p>
<p><strong>没有git环境的，自行百度安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换目录</span><br>cd ~/.ssh<br><br><span class="hljs-meta">#</span><span class="bash"> 新建config文件</span><br>vim config<br><br><span class="hljs-meta">#</span><span class="bash"> 输入以下内容</span><br>Host centos # 自定义, 用于后续的免密登录<br>HostName 192.168.117.29 # 服务器地址ip<br>User root # 登录的用户名<br>Port 22 # 端口<br>IdentityFile ~/.ssh/id_rsa # 私钥路径, id_rsa.pub是公钥<br><br><span class="hljs-meta">#</span><span class="bash"> 生成密钥对, 可以自行指定文件名, 默认为id_rsa和id_rsa.pub</span><br>ssh-keygen<br><br><span class="hljs-meta">#</span><span class="bash"> 发送id_rsa.pub文件至Linux服务器上</span><br>scp id_rsa.pub 用户名@ip:/home/<br><br><span class="hljs-meta">#</span><span class="bash"> 登录Linux服务器后, 进行操作</span><br>mv /home/id_rsa.pub ~/.ssh/authorized_keys<br><br><span class="hljs-meta">#</span><span class="bash"> 修改sshd_config配置, 确保以下几项配置前面没有<span class="hljs-comment">#字符</span></span><br>vim /etc/ssh/sshd_config<br><br>PubkeyAuthentication yes<br>AuthorizedKeysFile  .ssh/authorized_keys<br><br><span class="hljs-meta">#</span><span class="bash"> 重启ssh服务</span><br>systemctl restart sshd<br><br><span class="hljs-meta">#</span><span class="bash"> 返回Windows，打开cmd</span><br>ssh centos # 这里的centos, 对应config文件中Host配置的内容<br></code></pre></td></tr></table></figure>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>操作顺序一致，无需安装git环境，不过需要确保ssh和scp命令可执行</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
</search>
